import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { api } from '../../services/api';
import { StudentRequest, Lead } from '../../types';
import { Plus, MapPin, DollarSign, Clock, BookOpen, Loader2 } from 'lucide-react';
import { StudentRequestForm } from '../../components/student/StudentRequestForm';
import { MatchedTutorsList } from '../../components/student/MatchedTutorsList';

export const StudentDashboard: React.FC = () => {
  const { user } = useAuth();
  const [requests, setRequests] = useState<StudentRequest[]>([]);
  const [selectedRequest, setSelectedRequest] = useState<StudentRequest | null>(null);
  const [matchedTutors, setMatchedTutors] = useState<Lead[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadRequests();
  }, []);

  const loadRequests = async () => {
    if (!user) return;
    setLoading(true);
    try {
      const data = await api.getStudentRequests(user.id);
      setRequests(data);
      if (data.length > 0 && !selectedRequest) {
        setSelectedRequest(data[0]);
        loadMatchedTutors(data[0].id);
      }
    } catch (error) {
      console.error('Failed to load requests:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadMatchedTutors = async (requestId: string) => {
    try {
      const tutors = await api.getMatchedTutors(requestId);
      setMatchedTutors(tutors);
    } catch (error) {
      console.error('Failed to load matched tutors:', error);
    }
  };

  const handleRequestCreated = async () => {
    setShowForm(false);
    await loadRequests();
  };

  const handleSelectRequest = async (request: StudentRequest) => {
    setSelectedRequest(request);
    await loadMatchedTutors(request.id);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loader2 className="h-8 w-8 text-indigo-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Student Dashboard</h1>
          <p className="text-gray-600 mt-2">Find and connect with qualified tutors</p>
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-gray-900">My Requests</h2>
                <button
                  onClick={() => setShowForm(true)}
                  className="bg-indigo-600 text-white p-2 rounded-lg hover:bg-indigo-700 transition-colors"
                >
                  <Plus className="h-5 w-5" />
                </button>
              </div>

              {requests.length === 0 ? (
                <div className="text-center py-8">
                  <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                  <p className="text-gray-600 mb-4">No requests yet</p>
                  <button
                    onClick={() => setShowForm(true)}
                    className="text-indigo-600 hover:text-indigo-700 font-semibold"
                  >
                    Create your first request
                  </button>
                </div>
              ) : (
                <div className="space-y-3">
                  {requests.map((request) => (
                    <div
                      key={request.id}
                      onClick={() => handleSelectRequest(request)}
                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        selectedRequest?.id === request.id
                          ? 'border-indigo-600 bg-indigo-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-semibold text-gray-900">{request.subject}</span>
                        <span
                          className={`text-xs px-2 py-1 rounded-full ${
                            request.status === 'active'
                              ? 'bg-green-100 text-green-700'
                              : 'bg-gray-100 text-gray-700'
                          }`}
                        >
                          {request.status}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600">{request.class}</p>
                      <div className="flex items-center space-x-2 mt-2 text-xs text-gray-500">
                        <DollarSign className="h-3 w-3" />
                        <span>₹{request.budget}/hr</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="lg:col-span-2">
            {selectedRequest ? (
              <div className="space-y-6">
                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4">Request Details</h2>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="flex items-start space-x-3">
                      <BookOpen className="h-5 w-5 text-indigo-600 mt-0.5" />
                      <div>
                        <p className="text-sm text-gray-600">Subject & Class</p>
                        <p className="font-semibold text-gray-900">{selectedRequest.subject} - {selectedRequest.class}</p>
                      </div>
                    </div>
                    <div className="flex items-start space-x-3">
                      <DollarSign className="h-5 w-5 text-green-600 mt-0.5" />
                      <div>
                        <p className="text-sm text-gray-600">Budget</p>
                        <p className="font-semibold text-gray-900">₹{selectedRequest.budget}/hour</p>
                      </div>
                    </div>
                    <div className="flex items-start space-x-3">
                      <MapPin className="h-5 w-5 text-red-600 mt-0.5" />
                      <div>
                        <p className="text-sm text-gray-600">Location</p>
                        <p className="font-semibold text-gray-900">{selectedRequest.location.address || 'Location set'}</p>
                      </div>
                    </div>
                    <div className="flex items-start space-x-3">
                      <Clock className="h-5 w-5 text-orange-600 mt-0.5" />
                      <div>
                        <p className="text-sm text-gray-600">Preferred Timing</p>
                        <p className="font-semibold text-gray-900">{selectedRequest.timing.join(', ')}</p>
                      </div>
                    </div>
                  </div>
                  {selectedRequest.description && (
                    <div className="mt-4">
                      <p className="text-sm text-gray-600 mb-1">Description</p>
                      <p className="text-gray-900">{selectedRequest.description}</p>
                    </div>
                  )}
                </div>

                <MatchedTutorsList leads={matchedTutors} />
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center">
                <BookOpen className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">Select a request to view matched tutors</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {showForm && (
        <StudentRequestForm
          onClose={() => setShowForm(false)}
          onSuccess={handleRequestCreated}
        />
      )}
    </div>
  );
};
