import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { api } from '../../services/api';
import { SUBJECTS, CLASSES, TIME_SLOTS } from '../../types';
import { MapPin, Loader2 } from 'lucide-react';

interface TutorApplicationFormProps {
  onSuccess: () => void;
}

export const TutorApplicationForm: React.FC<TutorApplicationFormProps> = ({ onSuccess }) => {
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    subjects: [] as string[],
    classes: [] as string[],
    qualifications: '',
    experience: '',
    pricing: '',
    bio: '',
    availability: [] as string[],
    latitude: '',
    longitude: '',
    address: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [gettingLocation, setGettingLocation] = useState(false);

  const getLocation = () => {
    setGettingLocation(true);
    setError(''); // Clear previous errors
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData({
            ...formData,
            latitude: position.coords.latitude.toString(),
            longitude: position.coords.longitude.toString(),
            address: 'Current Location (fetched)',
          });
          setGettingLocation(false);
        },
        (err: GeolocationPositionError) => {
          console.error("Geolocation error:", err);
          let errorMessage = 'Could not get location. Please enter coordinates manually.';
          if (err.code === 1) { // PERMISSION_DENIED
            errorMessage = 'Geolocation is disabled. Please check your browser settings or enter your location manually.';
          } else if (err.code === 2) { // POSITION_UNAVAILABLE
            errorMessage = 'Location information is unavailable. Please try again or enter manually.';
          }
          setError(errorMessage);
          setGettingLocation(false);
        }
      );
    } else {
      setError('Geolocation is not supported by your browser. Please enter coordinates manually.');
      setGettingLocation(false);
    }
  };

  const toggleItem = (item: string, field: 'subjects' | 'classes' | 'availability') => {
    setFormData({
      ...formData,
      [field]: formData[field].includes(item)
        ? formData[field].filter(i => i !== item)
        : [...formData[field], item],
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (formData.subjects.length === 0) {
      setError('Please select at least one subject');
      return;
    }

    if (formData.classes.length === 0) {
      setError('Please select at least one class');
      return;
    }

    if (!formData.latitude || !formData.longitude) {
      setError('Please set your location');
      return;
    }

    setLoading(true);

    try {
      await api.createTutorProfile(user!.id, {
        subjects: formData.subjects,
        classes: formData.classes,
        qualifications: formData.qualifications,
        experience: Number(formData.experience),
        pricing: Number(formData.pricing),
        bio: formData.bio,
        availability: formData.availability,
        location: {
          type: 'Point',
          coordinates: [Number(formData.longitude), Number(formData.latitude)],
          address: formData.address,
        },
      });
      onSuccess();
    } catch (err) {
      setError('Failed to submit application');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
          {error}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Subjects You Teach *</label>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
          {SUBJECTS.map((subject) => (
            <button
              key={subject}
              type="button"
              onClick={() => toggleItem(subject, 'subjects')}
              className={`px-3 py-2 rounded-lg border-2 text-sm font-medium transition-all ${
                formData.subjects.includes(subject)
                  ? 'border-indigo-600 bg-indigo-50 text-indigo-600'
                  : 'border-gray-300 text-gray-700 hover:border-gray-400'
              }`}
            >
              {subject}
            </button>
          ))}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Classes You Teach *</label>
        <div className="grid grid-cols-3 md:grid-cols-4 gap-2">
          {CLASSES.map((cls) => (
            <button
              key={cls}
              type="button"
              onClick={() => toggleItem(cls, 'classes')}
              className={`px-3 py-2 rounded-lg border-2 text-sm font-medium transition-all ${
                formData.classes.includes(cls)
                  ? 'border-purple-600 bg-purple-50 text-purple-600'
                  : 'border-gray-300 text-gray-700 hover:border-gray-400'
              }`}
            >
              {cls}
            </button>
          ))}
        </div>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Qualifications *</label>
          <input
            type="text"
            required
            value={formData.qualifications}
            onChange={(e) => setFormData({ ...formData, qualifications: e.target.value })}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
            placeholder="e.g., M.Sc. Mathematics, B.Ed"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Experience (years) *</label>
          <input
            type="number"
            required
            min="0"
            value={formData.experience}
            onChange={(e) => setFormData({ ...formData, experience: e.target.value })}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
            placeholder="5"
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Pricing (â‚¹/hour) *</label>
        <input
          type="number"
          required
          min="0"
          value={formData.pricing}
          onChange={(e) => setFormData({ ...formData, pricing: e.target.value })}
          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
          placeholder="500"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Availability</label>
        <div className="grid grid-cols-2 gap-2">
          {TIME_SLOTS.map((slot) => (
            <button
              key={slot}
              type="button"
              onClick={() => toggleItem(slot, 'availability')}
              className={`px-3 py-2 rounded-lg border-2 text-sm font-medium transition-all ${
                formData.availability.includes(slot)
                  ? 'border-green-600 bg-green-50 text-green-600'
                  : 'border-gray-300 text-gray-700 hover:border-gray-400'
              }`}
            >
              {slot}
            </button>
          ))}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Location *</label>
        <div className="flex space-x-2 mb-2">
          <button
            type="button"
            onClick={getLocation}
            disabled={gettingLocation}
            className="flex items-center space-x-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50"
          >
            {gettingLocation ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                <span>Getting location...</span>
              </>
            ) : (
              <>
                <MapPin className="h-4 w-4" />
                <span>Use Current Location</span>
              </>
            )}
          </button>
        </div>
        <div className="grid grid-cols-2 gap-2">
          <input
            type="number"
            step="any"
            placeholder="Latitude"
            value={formData.latitude}
            onChange={(e) => setFormData({ ...formData, latitude: e.target.value })}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
          />
          <input
            type="number"
            step="any"
            placeholder="Longitude"
            value={formData.longitude}
            onChange={(e) => setFormData({ ...formData, longitude: e.target.value })}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
          />
        </div>
        <input
          type="text"
          placeholder="Address (optional)"
          value={formData.address}
          onChange={(e) => setFormData({ ...formData, address: e.target.value })}
          className="w-full mt-2 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Bio *</label>
        <textarea
          required
          value={formData.bio}
          onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
          rows={4}
          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
          placeholder="Tell us about your teaching experience and approach..."
        />
      </div>

      <button
        type="submit"
        disabled={loading}
        className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition-colors disabled:opacity-50 flex items-center justify-center space-x-2"
      >
        {loading ? (
          <>
            <Loader2 className="h-5 w-5 animate-spin" />
            <span>Submitting...</span>
          </>
        ) : (
          <span>Submit Application</span>
        )}
      </button>
    </form>
  );
};
