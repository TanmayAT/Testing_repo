import React from 'react';
import { Lead } from '../../types';
import { MapPin, DollarSign, Clock, BookOpen, Check, X } from 'lucide-react';

interface TutorLeadsListProps {
  leads: Lead[];
  onUpdateLead: (leadId: string, status: 'accepted' | 'declined') => void;
}

export const TutorLeadsList: React.FC<TutorLeadsListProps> = ({ leads, onUpdateLead }) => {
  if (leads.length === 0) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center">
        <BookOpen className="h-16 w-16 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">No Leads Yet</h3>
        <p className="text-gray-600">You'll receive leads when students match with your profile</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <h2 className="text-xl font-semibold text-gray-900 mb-4">Your Leads ({leads.length})</h2>
      <div className="space-y-4">
        {leads.map((lead) => (
          <div
            key={lead.id}
            className="border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow"
          >
            <div className="flex items-start justify-between mb-4">
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-1">
                  {lead.studentRequest.studentName}
                </h3>
                <div className="flex items-center space-x-2 text-sm text-gray-600">
                  <BookOpen className="h-4 w-4" />
                  <span>{lead.studentRequest.subject} - {lead.studentRequest.class}</span>
                </div>
              </div>
              <div className="bg-indigo-100 text-indigo-700 px-3 py-1 rounded-full text-sm font-semibold">
                {lead.matchScore}% Match
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-4 mb-4">
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <MapPin className="h-4 w-4 text-red-500" />
                <span>{lead.distance.toFixed(1)} km away</span>
              </div>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <DollarSign className="h-4 w-4 text-green-500" />
                <span>â‚¹{lead.studentRequest.budget}/hour budget</span>
              </div>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <Clock className="h-4 w-4 text-orange-500" />
                <span>{lead.studentRequest.timing.join(', ')}</span>
              </div>
            </div>

            {lead.studentRequest.description && (
              <div className="bg-gray-50 rounded-lg p-3 mb-4">
                <p className="text-sm text-gray-700">
                  <strong>Requirements:</strong> {lead.studentRequest.description}
                </p>
              </div>
            )}

            <div className="flex items-center justify-between">
              <span
                className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                  lead.status === 'pending'
                    ? 'bg-yellow-100 text-yellow-800'
                    : lead.status === 'accepted'
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}
              >
                {lead.status === 'pending' && 'Awaiting Response'}
                {lead.status === 'accepted' && 'Accepted'}
                {lead.status === 'declined' && 'Declined'}
              </span>

              {lead.status === 'pending' && (
                <div className="flex space-x-2">
                  <button
                    onClick={() => onUpdateLead(lead.id, 'accepted')}
                    className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    <Check className="h-4 w-4" />
                    <span>Accept</span>
                  </button>
                  <button
                    onClick={() => onUpdateLead(lead.id, 'declined')}
                    className="flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                  >
                    <X className="h-4 w-4" />
                    <span>Decline</span>
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
